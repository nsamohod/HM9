{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set seed for reproducibility\n",
    "import random; random.seed(53)\n",
    "\n",
    "# Import all we need from sklearn\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.svm import LinearSVC\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load data\n",
    "tweet_df = pd.read_csv('tweets_hw9_tidy.csv')\n",
    "\n",
    "# Create target\n",
    "y = tweet_df.author\n",
    "\n",
    "# Split training and testing data\n",
    "X_train, X_test, y_train, y_test = train_test_split(tweet_df['status'], y, test_size=0.33, \n",
    "                 random_state=53)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize count vectorizer\n",
    "count_vectorizer = CountVectorizer(stop_words='english', \n",
    "                                   min_df=0.05, max_df=0.9)\n",
    "\n",
    "# Create count train and test variables\n",
    "count_train = count_vectorizer.fit_transform(X_train)\n",
    "count_test = count_vectorizer.transform(X_test)\n",
    "\n",
    "# Initialize tfidf vectorizer\n",
    "tfidf_vectorizer = TfidfVectorizer(stop_words='english', \n",
    "                                   min_df=0.05, max_df=0.9)\n",
    "\n",
    "# Create tfidf train and test variables\n",
    "tfidf_train = tfidf_vectorizer.fit_transform(X_train)\n",
    "tfidf_test = tfidf_vectorizer.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NaiveBayes Tfidf Score:  0.6590909090909091\n",
      "NaiveBayes Count Score:  0.6742424242424242\n"
     ]
    }
   ],
   "source": [
    "tfidf_nb = MultinomialNB()\n",
    "tfidf_nb.fit(tfidf_train, y_train)\n",
    "tfidf_nb_pred = tfidf_nb.predict(tfidf_test)\n",
    "tfidf_nb_score = metrics.accuracy_score(y_test, tfidf_nb_pred)\n",
    "\n",
    "count_nb = MultinomialNB()\n",
    "count_nb.fit(count_train, y_train)\n",
    "count_nb_pred = count_nb.predict(count_test)\n",
    "count_nb_score = metrics.accuracy_score(y_test, count_nb_pred)\n",
    "\n",
    "print('NaiveBayes Tfidf Score: ', tfidf_nb_score)\n",
    "print('NaiveBayes Count Score: ', count_nb_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "Confusion matrix, without normalization\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "from helper_functions import plot_confusion_matrix\n",
    "\n",
    "\n",
    "tfidf_nb_cm = metrics.confusion_matrix(y_test, tfidf_nb_pred, labels=['BorisJohnson', 'AOC'])\n",
    "count_nb_cm = metrics.confusion_matrix(y_test, count_nb_pred, labels=['BorisJohnson', 'AOC'])\n",
    "\n",
    "plot_confusion_matrix(tfidf_nb_cm, classes=['BorisJohnson', 'AOC'], title=\"TF-IDF NB Confusion Matrix\")\n",
    "\n",
    "plot_confusion_matrix(count_nb_cm, classes=['BorisJohnson', 'AOC'], title=\"Count NB Confusion Matrix\", figure=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LinearSVC Score:   0.720\n",
      "Confusion matrix, without normalization\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tfidf_svc = LinearSVC()\n",
    "tfidf_svc.fit(tfidf_train, y_train)\n",
    "tfidf_svc_pred = tfidf_svc.predict(tfidf_test)\n",
    "tfidf_svc_score = metrics.accuracy_score(y_test, tfidf_svc_pred)\n",
    "\n",
    "print(\"LinearSVC Score:   %0.3f\" % tfidf_svc_score)\n",
    "\n",
    "svc_cm = metrics.confusion_matrix(y_test, tfidf_svc_pred, labels=['BorisJohnson', 'AOC'])\n",
    "plot_confusion_matrix(svc_cm, classes=['BorisJohnson', 'AOC'], title=\"TF-IDF LinearSVC Confusion Matrix\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'x' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-78-5281012d9682>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mpprint\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpprint\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mtop_features\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplot_and_return_top_features\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtfidf_svc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtfidf_vectorizer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mpprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtop_features\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/V/penn/Spring2021/516/python/helper_functions.py\u001b[0m in \u001b[0;36mplot_and_return_top_features\u001b[0;34m(classifier, vectorizer, top_features)\u001b[0m\n\u001b[1;32m     57\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mce\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtopn_class2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mce\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtopn_class1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m                 \u001b[0mtop_coefficients\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'x' is not defined"
     ]
    }
   ],
   "source": [
    "from helper_functions import plot_and_return_top_features\n",
    "\n",
    "from pprint import pprint\n",
    "top_features = plot_and_return_top_features(tfidf_svc, tfidf_vectorizer)\n",
    "pprint(top_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Boris Johnson tweet ['AOC']\n",
      "Predicted AOC tweet ['AOC']\n"
     ]
    }
   ],
   "source": [
    "bj_tweet = \"Herd immunity will save us\" \n",
    "aoc_tweet = \"AstraZeneca sucks\" \n",
    "\n",
    "bj_tweet_vectorized = tfidf_vectorizer.transform([bj_tweet])\n",
    "aoc_tweet_vectorized = tfidf_vectorizer.transform([aoc_tweet])\n",
    "\n",
    "bj_tweet_pred = tfidf_svc.predict(bj_tweet_vectorized)\n",
    "aoc_tweet_pred = tfidf_svc.predict(aoc_tweet_vectorized)\n",
    "\n",
    "print(\"Predicted Boris Johnson tweet\", bj_tweet_pred)\n",
    "print(\"Predicted AOC tweet\", aoc_tweet_pred)\n",
    "\n",
    "\n",
    "#BJ Tweets\n",
    "#The UK is a great country\n",
    "#The Duke lives in our hearts \n",
    "#Everyone is eligible for a vaccine\n",
    "\n",
    "#AOC Tweets\n",
    "#Climate Change is an issue \n",
    "#God save the Queen\n",
    "#Gender gap is real\n",
    "#Happy Mothers day\n",
    "#Happy Fathers day\n",
    "#Pfizer is the best\n",
    "#Minimum wage is a priority\n",
    "#AstraZeneca is safe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
